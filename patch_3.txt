def download_attachments_from_page(self, dest_folder: str, skip_filenames: set = None):
    """
    Finds attachment links in page HTML and downloads each, unless the predicted filename
    is present in skip_filenames. Returns mapping url -> local_path (or None).
    """
    if skip_filenames is None:
        skip_filenames = set()
    else:
        skip_filenames = {os.path.basename(s).strip() for s in skip_filenames if s}

    page_soup = self.confluence_content.get_page_as_html()   # <-- corrected
    if not page_soup:
        print("No page HTML available to search for attachments.")
        return {}

    page_name = list(page_soup.keys())[0]
    soup = page_soup.get(page_name)
    if soup is None:
        print("No parsed soup available.")
        return {}

    links = self._find_attachment_links_in_soup(soup)
    if not links:
        export_soup = self.confluence_content.get_page_export_view_as_html()
        if export_soup:
            if isinstance(export_soup, dict):
                export_obj = list(export_soup.values())[0]
            else:
                export_obj = export_soup
            links = self._find_attachment_links_in_soup(export_obj)

    downloaded_map = {}
    for link in links:
        predicted_name = os.path.basename(urlparse(link).path).split('?')[0]
        if not predicted_name:
            predicted_name = self._safe_filename_from_url(link)

        if predicted_name in skip_filenames:
            print(f"Skipping {link} (already downloaded: {predicted_name})")
            downloaded_map[link] = None
            continue

        local = self.download_attachment(link, dest_folder)
        downloaded_map[link] = local
        if local:
            print(f"Downloaded {link} -> {local}")
        else:
            print(f"Failed to download {link}")

    return downloaded_map


def download_api_then_page(self, page_id: str, dest_folder: str):
    """
    1) Download via attachments API first.
    2) Then download attachments discovered in page HTML,
       skipping any whose filename was already downloaded.
    """
    combined = {}

    # Step 1: API
    api_map = self.download_attachments_via_api(page_id, dest_folder)
    downloaded_filenames = set()
    for att_id, local_path in (api_map or {}).items():
        combined[f"confluence://{page_id}/attachment/{att_id}"] = local_path
        if local_path:
            downloaded_filenames.add(os.path.basename(local_path))

    # Step 2: Page HTML
    page_map = self.download_attachments_from_page(dest_folder, skip_filenames=downloaded_filenames)
    for link, local in (page_map or {}).items():
        combined[link] = local

    return combined
